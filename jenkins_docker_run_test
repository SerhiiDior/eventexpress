#!groovy
// Run docker 
properties([disableConcurrentBuilds()])

pipeline { 
    agent any 
    options {
        skipStagesAfterUnstable()
        timestamps()
    }
    environment {
        CONTAINER_NAME = "allure" 
        
    }
   
    
    stages {
       stage('Allure_Report') {
            steps {
                catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh 'docker run -d --rm --name allure -p 4040:4040 -p 5050:5050 -e CHECK_RESULTS_EVERY_SECONDS=3 -e KEEP_HISTORY="TRUE" -v Allure:/app/allure-results frankescobar/allure-docker-service'
            }
        }
     }
        stage('Run Tests') {
            steps {
                catchError (buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh 'docker run --rm -v directory:/workdir svdior/pyslim'
             }
         }
      }
        
        stage('get allure container IP & send result to Allure') {
            environment {
                    CONTAINER_ID = sh(script:'docker inspect --format="{{.ID}}" ${CONTAINER_NAME}',returnStdout: true)
                    CONTAINER_IP = sh(script:"docker inspect -f \"{{ .NetworkSettings.IPAddress }}\" ${CONTAINER_ID}", returnStdout: true)
                     
                }
      
            steps {
                
                echo "$env.CONTAINER_IP"
                 sh 'docker run --rm -v directory:/workdir svdior/pyslim python send_resalt_jenkins.py ${CONTAINER_IP}'
            }
        
        }
        
        
         
        
    }
}


